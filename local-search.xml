<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JDK新特性及使用示例</title>
    <link href="/2025/04/03/jdk/"/>
    <url>/2025/04/03/jdk/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK11"><a href="#JDK11" class="headerlink" title="JDK11"></a>JDK11</h1><h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p>该特性可简化代码书写，忽略类型信息</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> List.of(Map.of(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>));<br>list.stream()<br>        .flatMap(map -&gt; map.entrySet().stream())<br>        .forEach(entry -&gt; System.out.println(entry.getKey() + <span class="hljs-string">&quot;:&quot;</span> + entry.getValue()));<br></code></pre></td></tr></table></figure><h1 id="JDK17"><a href="#JDK17" class="headerlink" title="JDK17"></a>JDK17</h1><h2 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;name&quot;:&quot;tom&quot;,</span><br><span class="hljs-string">            &quot;age&quot;:21</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="JDK21"><a href="#JDK21" class="headerlink" title="JDK21"></a>JDK21</h1><h2 id="虚拟线程"><a href="#虚拟线程" class="headerlink" title="虚拟线程"></a>虚拟线程</h2><p>借助JVM直接管理线程，不再受操作系统资源限制，适用于IO密集型任务</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useVirtualThread</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime(); <span class="hljs-comment">// 记录开始时间</span><br>    <span class="hljs-type">var</span> <span class="hljs-variable">integerSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListSet</span>&lt;&gt;();<br>    <span class="hljs-type">var</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newVirtualThreadPerTaskExecutor();<br>    <span class="hljs-keyword">try</span> (executor) &#123;<br>        IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">1000000</span>).forEach(i -&gt; executor.submit(() -&gt; &#123;<br>            integerSet.add(i);<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;));<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.nanoTime(); <span class="hljs-comment">// 记录结束时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> TimeUnit.NANOSECONDS.toMillis(endTime - startTime); <span class="hljs-comment">// 转换为毫秒</span><br>    System.out.println(<span class="hljs-string">&quot;Virtual Total time taken: &quot;</span> + duration + <span class="hljs-string">&quot; ms&quot;</span>);<br>    System.out.println(integerSet.size());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>juc</title>
    <link href="/2025/04/03/juc/"/>
    <url>/2025/04/03/juc/</url>
    
    <content type="html"><![CDATA[<p>读多写少用CopyOnWriteArrayList，读少写多用ConcurrentSkipListSet</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2025/04/02/git/"/>
    <url>/2025/04/02/git/</url>
    
    <content type="html"><![CDATA[<h1 id="一台机器管理多个公钥"><a href="#一台机器管理多个公钥" class="headerlink" title="一台机器管理多个公钥"></a>一台机器管理多个公钥</h1><p>在实际开发中，往往会使用公司邮箱用作公钥生成，但是个人学习记录不太适合通过公司邮箱推送，因此生成多个公钥进行管理。<br>如公司用的gitlab使用公司邮箱，gitee、github等使用私人邮箱</p><ul><li>新建config文件，做如下配置<br>Host:自定义别名<br>HostName：服务器域名<br>PreferredAuthentications：权限认证，此处用publickey处理即可<br>IdentityFile：rsa文件地址</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text"># github<br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br><br># gitee<br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot Actuator</title>
    <link href="/2025/04/01/SpringActuator/"/>
    <url>/2025/04/01/SpringActuator/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot项目引入Actuator监控"><a href="#SpringBoot项目引入Actuator监控" class="headerlink" title="SpringBoot项目引入Actuator监控"></a>SpringBoot项目引入Actuator监控</h1><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>bootstrap.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-comment">#管理端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-comment">#暴露的端点，*表示全部，如果想要开放指定的端点，可以以逗号分割，指定开放，如info,health就表示开放info,health两个端点</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>测试<br>启动后访问本地actuator端点列表接口 <a href="http://127.0.0.1:8091/actuator">http://127.0.0.1:8091/actuator</a></li></ul><img src="/2025/04/01/SpringActuator/actuator%E7%AB%AF%E7%82%B9%E5%88%97%E8%A1%A8.png" class="" title="actuator端点列表.png"><p>访问一个开放的端点，如health</p><img src="/2025/04/01/SpringActuator/health%E7%AB%AF%E7%82%B9.png" class="" title="health端点.png"><h1 id="代码定位"><a href="#代码定位" class="headerlink" title="代码定位"></a>代码定位</h1><p>以health为例，health的端点实现方法为org.springframework.boot.actuate.health.HealthEndpoint#health()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ReadOperation</span><br><span class="hljs-keyword">public</span> HealthComponent <span class="hljs-title function_">health</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">HealthComponent</span> <span class="hljs-variable">health</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.health(ApiVersion.V3, EMPTY_PATH);<br>    <span class="hljs-keyword">return</span> (HealthComponent)(health != <span class="hljs-literal">null</span> ? health : DEFAULT_HEALTH);<br>&#125;<br></code></pre></td></tr></table></figure><p>其余端点可以去org.springframework.boot.actuate包下对应端点的包名中寻找响应的Endpoint类即可</p><h1 id="自定义端点扩展"><a href="#自定义端点扩展" class="headerlink" title="自定义端点扩展"></a>自定义端点扩展</h1><ul><li>新建hello的endpoint</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行项目，访问 <a href="http://127.0.0.1:8091/actuator">http://127.0.0.1:8091/actuator</a><br>发现hello端点出现在列表中</li></ul><img src="/2025/04/01/SpringActuator/actuator.png" class="" title="actuator.png"><ul><li>访问hello端点 <a href="http://127.0.0.1:8091/actuator/hello">http://127.0.0.1:8091/actuator/hello</a></li></ul><img src="/2025/04/01/SpringActuator/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%AF%E7%82%B9.png" class="" title="自定义端点.png"><h1 id="添加认证"><a href="#添加认证" class="headerlink" title="添加认证"></a>添加认证</h1><p>在实际的项目中，如果未进行特殊处理，actuator往往会触发Actuator未授权访问漏洞，<br>这种时候需要进行修复,下面推荐几种修复方式</p><ul><li>借助security进行授权<br>pom中引入security的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写认证代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Order(66)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable()<br>                <span class="hljs-comment">// 配置对/actuator/的请求进行拦截</span><br>                .authorizeRequests()<br>                <span class="hljs-comment">// 仅允许10.9网段及本地访问端点</span><br>                .antMatchers(<span class="hljs-string">&quot;/actuator/**&quot;</span>).access(<span class="hljs-string">&quot;hasIpAddress(&#x27;10.9.0.0/16&#x27;) or hasIpAddress(&#x27;127.0.0.1&#x27;)&quot;</span>)<br>                .and()<br>                <span class="hljs-comment">// 配置一个自定义的访问拒绝处理器（可选，但推荐用于明确的403响应）</span><br>                .exceptionHandling().accessDeniedHandler((request, response, accessDeniedException) -&gt; response.sendError(HttpServletResponse.SC_FORBIDDEN, <span class="hljs-string">&quot;You are not allowed to access!&quot;</span>));<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <a href="http://127.0.0.1:8091/actuator">http://127.0.0.1:8091/actuator</a><br>，发现可正常返回</p><img src="/2025/04/01/SpringActuator/127%E7%BD%91%E6%AE%B5%E8%AE%BF%E9%97%AE.png" class="" title="127网段访问.png"><p>访问 <a href="http://10.8.0.46:8091/actuator">http://10.8.0.46:8091/actuator</a><br>，返回403</p><img src="/2025/04/01/SpringActuator/10.8%E7%BD%91%E6%AE%B5.png" class="" title="10.8网段.png"><ul><li>仅开放部分端点<br>在部分要求不严格的环境中，可以只开放部分不敏感的端点,如</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">health,info</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandoc安装及基础使用</title>
    <link href="/2025/03/26/pandoc/"/>
    <url>/2025/03/26/pandoc/</url>
    
    <content type="html"><![CDATA[<h1 id="pandoc安装"><a href="#pandoc安装" class="headerlink" title="pandoc安装"></a>pandoc安装</h1><ul><li>访问<a href="https://github.com/jgm/pandoc/tags">pandoc tags</a>,切换至想要安装的版本，本次安装3.6.4</li></ul><ul><li>下载windows版本</li></ul><img src="/2025/03/26/pandoc/pandoc%E4%B8%8B%E8%BD%BD%E9%A1%B5.png" class="" title="pandoc下载页.png"><ul><li>下载<a href="https://mirror-hk.koddos.net/CTAN/systems/texlive/Images/">texlive镜像</a>，将文件转换成pdf需要用到</li></ul><img src="/2025/03/26/pandoc/texlive.png" class="" title="texlive.png"><p>点开后会进入最近的镜像网站</p><img src="/2025/03/26/pandoc/%E6%9C%80%E8%BF%91%E7%9A%84%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99.png" class="" title="最近的镜像网站.png"><ul><li>下载完成后解压iso文件，以管理员身份运行install-tl-windows.bat，后续默认安装即可</li><li>维护pandoc和texlive的环境变量</li></ul><img src="/2025/03/26/pandoc/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" class="" title="环境变量.png"><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li>编写test.md</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># test</span><br><span class="hljs-bullet">-</span> 1<br><span class="hljs-bullet">-</span> 2<br><span class="hljs-bullet">-</span> 3<br></code></pre></td></tr></table></figure><ul><li>执行转换命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pandoc test.md -o test.pdf<br></code></pre></td></tr></table></figure><ul><li>查看生成结果</li></ul><img src="/2025/03/26/pandoc/%E7%94%9F%E6%88%90%E7%BB%93%E6%9E%9C.png" class="" title="生成结果.png"><ul><li>适配中文<br>如果markdown文档中有中文，直接执行会有如下报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pandoc test.md -o test.pdf<br>Error producing PDF.<br>! LaTeX Error: Unicode character 浣?pandoc: &lt;stderr&gt;: hPutChar: invalid argument (Invalid argument)<br></code></pre></td></tr></table></figure><p>可以通过以下方式解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">通过--pdf-engine指定xelatex引擎，通过CJKmainfont指定字体(此次用宋体)</span><br>pandoc test.md -o test.pdf --pdf-engine=xelatex -V CJKmainfont=SimSun<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于redisson实现接口幂等性</title>
    <link href="/2025/03/11/%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <url>/2025/03/11/%E5%B9%82%E7%AD%89%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>实现幂等性的方法有很多种，本次仅基于redisson锁进行处理<br>本次开发基于自行封装的redis开发组件，有兴趣的可以看下<a href="https://gitee.com/learnhistory/redis">redis组件</a></p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="pom-xml引入redisson"><a href="#pom-xml引入redisson" class="headerlink" title="pom.xml引入redisson"></a>pom.xml引入redisson</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.39.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="redisson相关配置"><a href="#redisson相关配置" class="headerlink" title="redisson相关配置"></a>redisson相关配置</h2><ul><li>CusRedissonConfiguration(此次仅单体)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CusRedissonConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_ADDRESS_PATTERN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%s://%s:%s&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">singleRedissonClient</span><span class="hljs-params">(SingleProperties singleProperties)</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(String.format(REDIS_ADDRESS_PATTERN,<br>                        BooleanUtils.isTrue(singleProperties.getEncryptEnabled()) ?<br>                                RedisConstants.redisProtocol.ENCRYPT_REDIS : RedisConstants.redisProtocol.REDIS,<br>                        singleProperties.getHost(), singleProperties.getPort()))<br>                .setUsername(singleProperties.getUsername()).setPassword(singleProperties.getPassword());<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;cus.redisson&quot;, name = &quot;idempotent-default&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br>    <span class="hljs-keyword">public</span> Idempotent <span class="hljs-title function_">idempotent</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultIdempotentUtil</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>CusRedissonConfiguration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CusRedissonConfiguration</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">REDIS_ADDRESS_PATTERN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%s://%s:%s&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">singleRedissonClient</span><span class="hljs-params">(SingleProperties singleProperties)</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(String.format(REDIS_ADDRESS_PATTERN,<br>                        BooleanUtils.isTrue(singleProperties.getEncryptEnabled()) ?<br>                                RedisConstants.redisProtocol.ENCRYPT_REDIS : RedisConstants.redisProtocol.REDIS,<br>                        singleProperties.getHost(), singleProperties.getPort()))<br>                .setUsername(singleProperties.getUsername()).setPassword(singleProperties.getPassword());<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;cus.redisson&quot;, name = &quot;idempotent-default&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br>    <span class="hljs-keyword">public</span> Idempotent <span class="hljs-title function_">idempotent</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultIdempotentUtil</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>SingleProperties</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;cus.redisson.single-properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> RedisConstants.defaultRedisInfo.DEFAULT_IP;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> RedisConstants.defaultRedisInfo.DEFAULT_PORT;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">database</span> <span class="hljs-operator">=</span> RedisConstants.defaultRedisInfo.DEFAULT_DATABASE;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">encryptEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(String host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPort</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPort</span><span class="hljs-params">(String port)</span> &#123;<br>        <span class="hljs-built_in">this</span>.port = port;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getEncryptEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> encryptEnabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEncryptEnabled</span><span class="hljs-params">(Boolean encryptEnabled)</span> &#123;<br>        <span class="hljs-built_in">this</span>.encryptEnabled = encryptEnabled;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getDatabase</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> database;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDatabase</span><span class="hljs-params">(Integer database)</span> &#123;<br>        <span class="hljs-built_in">this</span>.database = database;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="lock代码编写"><a href="#lock代码编写" class="headerlink" title="lock代码编写"></a>lock代码编写</h2><ul><li>Lock</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Lock &#123;<br>    <span class="hljs-comment">//锁键</span><br>    String <span class="hljs-title function_">lockKey</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//等待时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">waitTime</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">60L</span>;<br><br>    <span class="hljs-comment">//自动释放时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">leaseTime</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//时间单位</span><br>    TimeUnit <span class="hljs-title function_">timeUnit</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> TimeUnit.SECONDS;<br><br>    <span class="hljs-comment">//锁类型</span><br>    String <span class="hljs-title function_">lockType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;FAIR&quot;</span>;<br><br>    <span class="hljs-comment">//校验lockKey是否存在</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">lockKeyExistFlag</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>LockAspect<br>此处为核心处理代码，如果需要检验lockKey是否是被伪造的，可以将lockKeyExistFlag设置为true，由idempotent执行相关校验逻辑<br>getLockKey可以视为通用方法，后续考虑放到core中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockAspect</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(LockAspect.class);<br><br>    <span class="hljs-keyword">private</span> LockServiceFactory lockServiceFactory;<br><br>    <span class="hljs-keyword">private</span> Idempotent idempotent;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLockServiceFactory</span><span class="hljs-params">(LockServiceFactory lockServiceFactory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lockServiceFactory = lockServiceFactory;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIdempotent</span><span class="hljs-params">(Idempotent idempotent)</span> &#123;<br>        <span class="hljs-built_in">this</span>.idempotent = idempotent;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(lock)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, Lock lock)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getLockKey(joinPoint, lock);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(lockKey)) &#123;<br>            LOGGER.error(<span class="hljs-string">&quot;lockKey is empty&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//校验lockKey是否是被伪造的，lockKey的生成和校验逻辑可以自定义</span><br>        <span class="hljs-keyword">if</span> (lock.lockKeyExistFlag() &amp;&amp; !idempotent.lockKeyExist(lockKey)) &#123;<br>            LOGGER.error(<span class="hljs-string">&quot;the lockKey was forged&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">LockService</span> <span class="hljs-variable">lockService</span> <span class="hljs-operator">=</span> lockServiceFactory.getLockServiceByType(lock.lockType());<br>        <span class="hljs-type">CusLockInfo</span> <span class="hljs-variable">cusLockInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CusLockInfo</span>();<br>        cusLockInfo.setLockKey(lockKey);<br>        cusLockInfo.setWaitTime(lock.waitTime());<br>        cusLockInfo.setLeaseTime(lock.leaseTime());<br>        cusLockInfo.setTimeUnit(lock.timeUnit());<br>        <span class="hljs-keyword">try</span> &#123;<br>            lockService.lock(cusLockInfo);<br>            <span class="hljs-keyword">if</span> (!lockService.lock(cusLockInfo)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failed to acquire lock&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//开启了伪造校验，结束后需进行清除</span><br>            <span class="hljs-keyword">if</span> (lock.lockKeyExistFlag() &amp;&amp; !idempotent.clear(lockKey)) &#123;<br>                LOGGER.error(<span class="hljs-string">&quot;Verification resource lockKey clearance failed, lockKey value is&#123;&#125;&quot;</span>, lockKey);<br>            &#125;<br>            lockService.unLock(cusLockInfo);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 结合el表达式解析lockKey</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lock      锁信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> lockKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getLockKey</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, Lock lock)</span> &#123;<br>        <span class="hljs-comment">// 获取方法签名</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br><br>        <span class="hljs-comment">// 创建表达式解析器</span><br>        <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>        <span class="hljs-comment">// 创建评估上下文</span><br>        <span class="hljs-type">EvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br><br>        <span class="hljs-comment">// 将方法参数绑定到上下文中</span><br>        String[] paramNames = signature.getParameterNames();<br>        Object[] paramValues = joinPoint.getArgs();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paramNames.length; i++) &#123;<br>            context.setVariable(paramNames[i], paramValues[i]);<br>        &#125;<br><br>        <span class="hljs-comment">// 解析lockKey的值</span><br>        <span class="hljs-keyword">return</span> parser.parseExpression(lock.lockKey()).getValue(context, String.class);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="lockKey相关逻辑"><a href="#lockKey相关逻辑" class="headerlink" title="lockKey相关逻辑"></a>lockKey相关逻辑</h2><ul><li>Idempotent<br>实现类可自定义，yml中指定idempotent-default为false，自行注册Idempotent的自定义实现类即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Idempotent</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建唯一性lockKey</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 构建lockKey的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> lockKey</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">createUniqueLockKey</span><span class="hljs-params">(String... args)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验lockKey是否存在（是否是伪造的）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey lockKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> lockKey是否存在</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">lockKeyExist</span><span class="hljs-params">(String lockKey)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清除校验数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lockKey lockKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否清除成功</span><br><span class="hljs-comment">     */</span><br>    Boolean <span class="hljs-title function_">clear</span><span class="hljs-params">(String lockKey)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DefaultIdempotentUtil</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultIdempotentUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Idempotent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(DefaultIdempotentUtil.class);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token_%s_%s&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SERVERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;default&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">UNIQUE_FLAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> RedisHelper redisHelper;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRedisHelper</span><span class="hljs-params">(RedisHelper redisHelper)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redisHelper = redisHelper;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取token的接口需要防止疯狂获取导致redis暴库</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverName 服务名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUniqueTokenWithServerName</span><span class="hljs-params">(String serverName)</span> &#123;<br>        serverName = Optional.ofNullable(serverName).orElse(DEFAULT_SERVERNAME);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uniqueToken</span> <span class="hljs-operator">=</span> String.format(PREFIX, serverName, uuid);<br>        logger.debug(<span class="hljs-string">&quot;&#123;&#125; generate unique_token &#123;&#125;&quot;</span>, serverName, uniqueToken);<br>        redisHelper.strSet(uniqueToken, UNIQUE_FLAG);<br>        <span class="hljs-keyword">return</span> uniqueToken;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUniqueLockKey</span><span class="hljs-params">(String... args)</span> &#123;<br>         <span class="hljs-comment">// 确保至少有一个参数被提供</span><br>        <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;At least one argument is required.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 使用第一个参数作为serverName</span><br>        <span class="hljs-keyword">return</span> createUniqueTokenWithServerName(args[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">lockKeyExist</span><span class="hljs-params">(String lockKey)</span>&#123;<br>        <span class="hljs-keyword">return</span> StringUtils.isNotEmpty(redisHelper.strGet(lockKey));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">clear</span><span class="hljs-params">(String lockKey)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisHelper.del(lockKey);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="yml相关配置"><a href="#yml相关配置" class="headerlink" title="yml相关配置"></a>yml相关配置</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">spring:<br>  redis:<br>    host: ip<br>    port: port<br>    database: 1<br>    username: root<br>    password: root<br>    jedis:<br>      pool:<br>        # 资源池中最大连接数<br>        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整<br>        max-active: $&#123;SPRING_REDIS_POOL_MAX_ACTIVE:50&#125;<br>        # 资源池运行最大空闲的连接数<br>        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销<br>        max-idle: $&#123;SPRING_REDIS_POOL_MAX_IDLE:50&#125;<br>        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)<br>        # 默认 -1 表示永不超时，设置5秒<br>        max-wait: $&#123;SPRING_REDIS_POOL_MAX_WAIT:5000&#125;<br>cus:<br>  redisson:<br>    single-properties:<br>      host: ip<br>      port: port<br>      username: root<br>      password: root<br>    idempotent-default: true<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1].<a href="https://gitee.com/learnhistory/redis">redis代码</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>redisson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2025/03/03/hexo%E4%BC%98%E5%8C%96/"/>
    <url>/2025/03/03/hexo%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo博客优化"><a href="#hexo博客优化" class="headerlink" title="hexo博客优化"></a>hexo博客优化</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>hexo默认使用的是landscape，可以自行切换主题，本次切换成fluid</p><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><ul><li>在博客目录下创建<br>_config.fluid.yml，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</li><li>编辑配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim _config.yml<br></code></pre></td></tr></table></figure><p>将主题设置为fluid，同时指定语言</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">theme: fluid  <br>language: zh-CN  <br></code></pre></td></tr></table></figure><ul><li>查看效果</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E6%BC%94%E7%A4%BA%E6%95%88%E6%9E%9C.png" class="" title="演示效果.png"><h2 id="文档中插入图片"><a href="#文档中插入图片" class="headerlink" title="文档中插入图片"></a>文档中插入图片</h2><ul><li>安装hexo-asset-img</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-asset-img<br></code></pre></td></tr></table></figure><ul><li>建立一个与md同名的文件夹，如当前文件为hexo优化.md，则新建一个hexo优化文件夹，将演示效果图片放入该文件夹中</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E6%96%87%E6%A1%A3%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.png" class="" title="文档插入图片.png"><ul><li>插入md命令</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[演示效果.png](hexo优化/演示效果.png)<br></code></pre></td></tr></table></figure><ul><li>调整_config.yml</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">post_asset_folder: true<br></code></pre></td></tr></table></figure><ul><li>清理缓存及静态资源并重新生成静态资源</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E9%87%8D%E6%96%B0%E7%94%9F%E6%88%90%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90.png" class="" title="重新生成的静态资源"><ul><li>自动生成资源文件夹<br>当将post_asset_folder设置为true时，执行以下命令会自动生成一个同名文件夹</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo new test<br></code></pre></td></tr></table></figure><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E5%A4%B9.png" class="" title="自动生成文件夹"><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ul><li>安装hexo的git插件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git<br></code></pre></td></tr></table></figure><ul><li>github创建新仓库<br>仓库名需要为 用户名.github.io,同时将仓库设置为公开</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" class="" title="新建仓库"><ul><li>复制仓库地址</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" class="" title="仓库地址.png"><ul><li>修改hexo的_config.yml中的发布配置</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">deploy:<br>  type: &#x27;git&#x27;<br>  repository: git@github.com:github用户名/github用户名.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><ul><li>执行发布命令</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><ul><li>访问<a href="https://github用户名.github.io/">https://github用户名.github.io</a></li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/hexo%E9%A6%96%E9%A1%B5.png" class="" title="hexo首页"><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><ul><li>访问<a href="https://github.com/apps/utterances">utterances首页</a>,进行安装</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/utterances%E9%A6%96%E9%A1%B5.png" class="" title="utterances首页"><ul><li>新建评论仓库</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/comment.png" class="" title="comment.png"><ul><li>访问<a href="https://github.com/settings/installations">utterances配置页</a>_</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/utterances%E9%85%8D%E7%BD%AE%E9%A1%B5.png" class="" title="utterances配置页.png"><ul><li>更改Repository access</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/repositoryAccess.png" class="" title="Repository access.png"><ul><li>维护_config.fluid.yml<br>启用comments,指定插件为utterances，并维护utterances的repo，其他保持默认即可</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text"> comments:<br>   enable: true<br>   # 指定的插件，需要同时设置对应插件的必要参数<br>   # The specified plugin needs to set the necessary parameters at the same time<br>   # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss<br>   type: utterances<br>utterances:<br> repo: 2016583454/comment<br> issue_term: pathname<br> label: utterances<br> theme: github-light<br> theme_dark: github-dark<br></code></pre></td></tr></table></figure><p>如果不满足于utterances的默认配置，可以访问<a href="https://utteranc.es/">utteranc</a>,自行选择相应选项，构建相关内容</p><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/utteranc%E9%85%8D%E7%BD%AE.png" class="" title="utteranc配置.png"><ul><li>运行hexo，查看效果</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E8%AF%84%E8%AE%BA%E6%95%88%E6%9E%9C.png" class="" title="评论效果.png"><h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><ul><li>进入hexo目录，安装live2d</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><ul><li>安装模型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save live2d-widget-model-miku<br></code></pre></td></tr></table></figure><ul><li>维护_config.yml</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs text">live2d:<br>  enable: true<br>  # enable: false<br>  scriptFrom: local # 默认<br>  pluginRootPath: live2d/ # 插件在站点上的根目录(相对路径)<br>  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径<br>  pluginModelPath: assets/ # 模型文件相对与插件根目录路径<br>  # scriptFrom: jsdelivr # jsdelivr CDN<br>  # scriptFrom: unpkg # unpkg CDN<br>  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url<br>  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中<br>  debug: false # 调试, 是否在控制台输出日志<br>  model:<br>    use: live2d-widget-model-miku # npm-module package name<br>    # use: wanko # 博客根目录/live2d_models/ 下的目录名<br>    # use: ./wives/wanko # 相对于博客根目录的路径<br>    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url<br>  display:<br>    position: left ##居右<br>    width: 80 ##宽度<br>    height: 120 ##高度<br>  mobile:<br>    show: true ##移动端是否显示<br>  react:<br>    opacity: 0.7<br></code></pre></td></tr></table></figure><ul><li>启动hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo server<br></code></pre></td></tr></table></figure><ul><li>查看效果</li></ul><img src="/2025/03/03/hexo%E4%BC%98%E5%8C%96/%E7%9C%8B%E6%9D%BF%E5%A8%98.png" class="" title="看板娘.png"><h2 id="看板娘进化"><a href="#看板娘进化" class="headerlink" title="看板娘进化"></a>看板娘进化</h2><p>hexo-helper-live2d已经很长时间未维护了，可以使用<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a></p><ul><li>卸载live2d</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall hexo-helper-live2d<br></code></pre></td></tr></table></figure><ul><li>创建live2d目录，进入目录克隆代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:stevenjoezhang/live2d-widget.git<br></code></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[2].<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">live2d插件文档</a><br>[3].<a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>博客优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
